;; -*- mode: scheme; -*-
;; little canvas engine
;; (C) 2013 David Griffiths
;; GPL Affero etc

(js "; $.ajaxSetup ({
    cache: false
})")

(define bg-col "#221d35") 
(define highlight-col "#f5dc6e")

(define (server-call name argsl)
  ;; hack together a js object to send
   (define args
    (foldl
     (lambda (i r)
       (js "r[i[0]]=i[1]")
       r)
     (js "{}")
     argsl))
  (set! args.function_name name)
  (console.log args)
  (let ((v ($.get "game" args)))
    (v.fail (lambda (jqXHR textStatus errorThrown)
              (console.log textStatus)
              (console.log errorThrown)))))

 (define (server-call-mutate name argsl f)
   ;; hack together a js object to send
   (define args
    (foldl
     (lambda (i r)
       (js "r[i[0]]=i[1]")
       r)
     (js "{}")
     argsl))
  (set! args.function_name name)
  (console.log args)
  (let ((v ($.get "game" args (mutate-game f))))
    (v.fail (lambda (jqXHR textStatus errorThrown)
              (console.log textStatus)
              (console.log errorThrown)))))


(define (choose l)
  (list-ref l (random (length l))))

(define (delete-n l n)
  (if (eq? n 0)
      (cdr l)
      (append (list (car l)) (delete-n (cdr l) (- n 1)))))

(define shuffle
  (lambda (l)
    (if (< (length l) 2)
        l
        (let ((item (random (length l))))
          (cons (list-ref l item)
                (shuffle (delete-n l item)))))))

(define (crop l n)
  (cond
   ((null? l) ())
   ((zero? n) ())
   (else (cons (car l) (crop (cdr l) (- n 1))))))

(define (transform x y r s) (list x y r s))

(define (transform-x t) (list-ref t 0))
(define (transform-y t) (list-ref t 1))

(define (play-sound sound)
 (let ((snd (new Audio sound)))
    (snd.play)))

(define image-lib ())

(define (load-image-mutate fn filename)
  (let ((image (js "new Image()")))
    (set! image.onload
          (mutate-game
           (lambda (c)
             (set! image-lib (cons (list filename image) image-lib))
             (fn c))))
    (set! image.src (+ "images/" filename))))

(define (load-image! fn finished images)
  (let ((image (js "new Image()")))
    (set! image.onload
          (lambda ()
            ;;(console.log (+ "loaded " (+ "images/" fn)))
            (set! image-lib (cons (list fn image) image-lib))
            (ctx.clearRect 0 0 screen-width screen-height)
            (set! ctx.font "normal 75pt effra")
            (centre-text ctx "Loading..." 240)
            (centre-text
             ctx
             (+ "" (Math.floor (* (/ (length image-lib)
                                     (length images)) 100)) "%")  340)
            (when (eq? (length image-lib)
                       (length images))
                  (finished))))
;;    (console.log (+ "loading " (+ "images/" fn)))
    (set! image.src (+ "images/" fn))))

(define (load-images! l finished)
  (for-each
   (lambda (fn)
     (load-image! fn finished l))
   l))

(define (find-image fn l)
  (cond
   ((null? l) #f)
   ((eq? (car (car l)) fn) (cadr (car l)))
   (else (find-image fn (cdr l)))))

;; ----------------------------------------

(define (centre-text ctx txt y)
  (let ((m (ctx.measureText txt)))
    (ctx.fillText txt (- (/ screen-width 2) (/ m.width 2)) y)))

(define (left-text ctx txt x y)
  (ctx.fillText txt x y))

(define (wrap-text ctx text x y max-width line-height)
  (define x-pos 350)
  (define (wrap-text-inner words line y)
    (if (null? words)
	(begin
	  ;;(when (zero? x-pos)
	  ;;(let ((m (ctx.measureText line)))
	  ;;  (set! x-pos (- (/ screen-width 2) (/ m.width 2)))))
	  (left-text ctx line x-pos y))
	(begin
	  (let ((test-line (+ line (car words) " ")))
	    (let ((metrics (ctx.measureText test-line)))
	      (if (> metrics.width max-width)
		  (begin
		    ;; todo cond returning too early...
		    ;;(when (zero? x-pos)
		    ;;	  (let ((m (ctx.measureText line)))
		    ;;     (set! x-pos (- (/ screen-width 2) (/ m.width 2)))))
		    
		    (left-text ctx line x-pos y)
		    (wrap-text-inner (cdr words)
				     (+ (car words) " ")
				     (+ y line-height)))
		  (begin
		    (wrap-text-inner
		     (cdr words) test-line y))))))))
  (wrap-text-inner (text.split " ") "" y))

(define (text-max-width ctx text wrap-width)
  (let ((ret 0))
    (define (_ words line)
      (if (null? words)
	  (begin
	    (let ((m (ctx.measureText line)))
	      (when (> m.width ret) (set! ret m.width))))
	  (begin
	    (let ((test-line (+ line (car words) " ")))
	      (let ((metrics (ctx.measureText test-line)))
		(if (> metrics.width wrap-width)
		    (begin
		      (let ((m (ctx.measureText line)))
			(when (> m.width ret) (set! ret m.width)))
		      (_ (cdr words) (+ (car words) " ")))
		    (begin
		      (when (> metrics.width ret) (set! ret metrics.width))
		      (_ (cdr words) test-line))))))))
    (_ (text.split " ") "")
    ret))

(define (multitext-max-width ctx text wrap-width)
  (let ((ret 0))
    (for-each
     (lambda (text)
       (let ((w (text-max-width ctx text wrap-width)))
	 (when (> w ret) (set! ret w))))
     text)
    ret))

;; (- (/ screen-width 2) (/ (multitext-max-width ctx text max-width) 2)))

(define (wrap-multitext-slow ctx text x y max-width line-height)
  (define x-pos 0)
  (define y-pos 0)
  (set! y-pos y)
  (define (wrap-multitext-slow-inner words line)
    (if (null? words)
	(begin
	  (left-text ctx line x-pos y-pos))
	(begin
	  (let ((test-line (+ line (car words) " ")))
	    (let ((metrics (ctx.measureText test-line)))
	      (if (> metrics.width max-width)
		  (begin
		    ;; todo cond returning too early...
		    (left-text ctx line x-pos y-pos)
		    (set! y-pos (+ y-pos line-height))
		    (wrap-multitext-slow-inner (cdr words)
				     (+ (car words) " ")))
		  (begin
		    (wrap-multitext-slow-inner
		     (cdr words) test-line))))))))

  (set! x-pos (+ 350 x)) 
  (for-each
   (lambda (text)
     (wrap-multitext-slow-inner (text.split " ") "")
     (set! y-pos (+ y-pos line-height)))
   text))


(define (wrap-multitext ctx text x y max-width line-height)
  (define x-pos 0)
  (define y-pos 0)
  (set! y-pos y)
  (define (wrap-multitext-inner words line)
    (if (null? words)
	(begin
	  (when (zero? x-pos)
		(let ((m (ctx.measureText line)))
		  (set! x-pos (- (/ screen-width 2) (/ m.width 2)))))
	  (left-text ctx line x-pos y-pos))
	(begin
	  (let ((test-line (+ line (car words) " ")))
	    (let ((metrics (ctx.measureText test-line)))
	      (if (> metrics.width max-width)
		  (begin
		    ;; todo cond returning too early...
		    (when (zero? x-pos)
			  (let ((m (ctx.measureText line)))
			    (set! x-pos (- (/ screen-width 2) (/ m.width 2)))))
		    
		    (left-text ctx line x-pos y-pos)
		    (set! y-pos (+ y-pos line-height))
		    (wrap-multitext-inner (cdr words)
				     (+ (car words) " ")))
		  (begin
		    (wrap-multitext-inner
		     (cdr words) test-line))))))))
  (for-each
   (lambda (text)
     (wrap-multitext-inner (text.split " ") "")
     (set! y-pos (+ y-pos line-height)))
   text))

(define (sprite x y image timer)
  (list x y image timer))

(define (sprite-x s) (list-ref s 0))
(define (sprite-y s) (list-ref s 1))
(define (sprite-modify-x s v) (list-replace s 0 v))
(define (sprite-modify-y s v) (list-replace s 1 v))
(define (sprite-image s) (list-ref s 2))
(define (sprite-timer s) (list-ref s 3))

(define (sprite-render ctx t s)
  (when (< t (sprite-timer s))
        (ctx.save)
        (ctx.translate (sprite-x s) (sprite-y s))
        (ctx.drawImage
         (find-image (sprite-image s) image-lib)
         0 0)
        (ctx.restore)))

;; ----------------------------------------

(define (rect-button name x y w h jitter callback)
      (list "rect-button" name x y w h
            jitter callback #f (rndf)))

(define (image-button name x y jitter image-name callback)
    (let ((image (find-image image-name image-lib)))
      (set! ctx.font "30pt effra")
      (list "image-button"
            name x y
	    (let ((m (ctx.measureText name)))
	      (+ m.width 20))
            80 
            jitter callback image-name
            (rndf))))

;;image.height

(define (circle-button name x y r callback)
  (list "circle-button" name x y r r #f callback #f (rndf)))

(define (button-type b) (list-ref b 0))
(define (button-name b) (list-ref b 1))
(define (button-x b) (list-ref b 2))
(define (button-y b) (list-ref b 3))
(define (button-w b) (list-ref b 4))
(define (button-r b) (list-ref b 4))
(define (button-h b) (list-ref b 5))
(define (button-jitter b) (list-ref b 6))
(define (button-callback b) (list-ref b 7))
(define (button-image b) (list-ref b 8))
(define (button-offs b) (list-ref b 9))

(define (dist-2d x1 y1 x2 y2)
  (let ((x (- x2 x1))
        (y (- y2 y1)))
    (Math.sqrt (+ (* x x) (* y y)))))

(define (in-rect? x y w h xx yy)
  (and (> xx x)
       (< xx (+ x w))
       (> yy y)
       (< yy (+ y h))))

(define (in-circle? x y r xx yy)
  (< (dist-2d xx yy x y) r))

(define (rect-button-update! b mx my c)
  (if (in-rect? (button-x b) (button-y b)
                (button-w b) (button-h b)
                mx my)
      (let ((fn (button-callback b)))
        (list #t (fn c)))
      (list #f c)))

(define (circle-button-update! b mx my c)
  (if (in-circle? (button-x b) (button-y b)
                  (button-r b) mx my)
      (let ((fn (button-callback b)))
        (list #t (fn c)))
      (list #f c)))

(define (button-update! b mx my c)
  (cond
   ((eq? (button-type b) "rect-button")
    (rect-button-update! b mx my c))
   ((eq? (button-type b) "image-button")
    (rect-button-update! b mx my c))
   (else
    (circle-button-update! b mx my c))))

(define (rect-button-render! ctx t b)
  (when #f
        (ctx.save)
        (ctx.translate (button-x b) (button-y b))
        (when (button-jitter b)
              (ctx.translate (/ (button-w b) 2)
                             (/ (button-h b) 2))
              (ctx.rotate (* 0.2 (- (rndf) 0.5)))
              (ctx.scale (+ 1 (* 0.2 (- (rndf) 0.5)))
                         (+ 1 (* 0.2 (- (rndf) 0.5))))
              (ctx.translate (- 0 (/ (button-w b) 2))
                       (- 0 (/ (button-h b) 2))))

        (set! ctx.strokeStyle "#fff")
        (ctx.strokeRect
         0 0 (button-w b) (button-h b))
        (ctx.fillText (button-name b) (/ (button-w b) 2) (+ 20 (/ (button-h b) 2)))
        (ctx.restore)
        ))

(define (image-button-render! ctx t b)
  (ctx.save)
  (ctx.translate (button-x b) (button-y b))
  ;; (when (button-jitter b)
  ;;       (ctx.translate (/ (button-w b) 2)
  ;;                      (/ (button-h b) 2))
  ;;       (ctx.rotate (* 0.05 (Math.sin (+ (* (button-offs b) 10) (* t 0.01)))))
  ;;       ;;(ctx.scale (+ 1 (* 0.2 (- (rndf) 0.5)))
  ;;       ;;           (+ 1 (* 0.2 (- (rndf) 0.5))))
  ;;       (ctx.translate (- 0 (/ (button-w b) 2))
  ;;                      (- 0 (/ (button-h b) 2))))

  ;;(ctx.drawImage
  ;; (find-image (button-image b) image-lib)
  ;; 0 0)

  (set! ctx.font "30pt effra")

  (let ((m (ctx.measureText (button-name b))))
  
    (set! ctx.fillStyle highlight-col)
    (ctx.fillRect 0 0 (+ (button-w b) 20) (button-h b))
    
    (set! ctx.fillStyle bg-col)
    (ctx.fillText
     (button-name b)
     (+ (- (/ (button-w b) 2) (/ m.width 2)) 10)
     (+ (/ (button-h b) 2) 15)))
  (ctx.restore))


(define (circle-button-render! ctx t b)
  (ctx.beginPath)
  (ctx.arc (button-x b) (button-y b)
           (button-r b) 0 (* Math.PI 2) true)
  (ctx.closePath)
  (set! ctx.strokeStyle "#fff")
  (ctx.stroke))

(define (button-render! ctx t b)
  (cond
   ((eq? (button-type b) "rect-button")
    (rect-button-render! ctx t b))
   ((eq? (button-type b) "image-button")
    (image-button-render! ctx t b))
   (else
    (circle-button-render! ctx t b))))

;; ----------------------------------------

(define (button-list b)
  b)

(define (button-inner-update b mx my c)
  (foldl
   (lambda (b r)
     (if (not (car r)) ;; if event not handled
         (button-update! b mx my (cadr r))
         (js "r")))
   (list #f c)
   b))

(define (buttons-update b mx my c)
  (let ((r (button-inner-update b mx my c)))
    (cadr r)))

(define (buttons-render! ctx t b)
  (for-each
   (lambda (b)
     (button-render! ctx t b))
   b))

;; ----------------------------------------

(define (make-new-game)
  (list 0
        (lambda (ctx)
          0)
        (lambda (t c)
          c)
        ()
        0
        0
        ()))

(define (game-time g) (list-ref g 0))
(define (game-modify-time v g) (list-replace g 0 v))
(define (game-render g) (list-ref g 1))
(define (game-modify-render v g) (list-replace g 1 v))
(define (game-update g) (list-ref g 2))
(define (game-modify-update v g) (list-replace g 2 v))
(define (game-buttons g) (list-ref g 3))
(define (game-modify-buttons v g) (list-replace g 3 v))
(define (game-data g) (list-ref g 4))
(define (game-modify-data fn g) (list-replace g 4 (fn (game-data g))))
(define (game-mx g) (list-ref g 5))
(define (game-modify-mx v g) (list-replace g 5 v))
(define (game-my g) (list-ref g 6))
(define (game-modify-my v g) (list-replace g 6 v))

(define (game-input g mx my)
  (buttons-update (game-buttons g) mx my
                  (game-modify-mx
                   mx (game-modify-my my g))))

;; ----------------------------------------

(define timeout-trigger (* 2 60))
(define timeout-time 0)
(define timeout-delta 0)
(define timeout-t (js "new Date()"))

(define (top-update-game t game)
  (set! timeout-time (+ timeout-time timeout-delta))
  (when (> timeout-time timeout-trigger)
	(window.location.reload))
  (set! timeout-delta (/ (- (js "new Date()") timeout-t) 1000.0))
  (set! timeout-t (js "new Date()"))
  (let ((fn (game-update game)))
    (set! game (game-modify-time
                t (fn t game)))))

(define (top-render-game ctx game)
  (let ((fn (game-render game)))
    (fn ctx)))

(define (top-render)
  (when (not (eq? game 0))
        (ctx.clearRect 0 0 screen-width screen-height)
        (let ((t (- (js "new Date()") load-time)))
          (set! ctx.font "10pt courier")
          (set! ctx.fillStyle "#fff");
;;          (ctx.fillText (+ "Time is: " t) 10 750)
          (set! ctx.font "75pt stefanie")
          (top-update-game t game)
          (top-render-game ctx game)
          (buttons-render! ctx t (game-buttons game)))
        (requestAnimFrame top-render ctx)))

(define game 0)

(define (mouse-from-event g canvas e)
  (set! timeout-time 0)
  (let ((rect (canvas.getBoundingClientRect)))
    (let ((sx (/ rect.width screen-width))
          (sy (/ rect.height screen-height)))
      (list (/ (- e.clientX rect.left) sx)            
            (/ (- e.clientY rect.top) sy)))))

(define (touch-from-event g canvas e)
  (set! timeout-time 0)
  (let ((e (car e.targetTouches)))
    (mouse-from-event g canvas e)))

(define touchscreen 0)

(define (start-game canvas ctx)
  (ctx.clearRect 0 0 screen-width screen-height)

  (canvas.addEventListener
   "mousedown"
   (lambda (e)
     (when (zero? touchscreen)
           (let ((m (mouse-from-event game canvas e)))
             (set! game (game-input game (car m) (cadr m)))))))

  (canvas.addEventListener
   "touchstart"
   (lambda (e)
     (e.preventDefault)
     (set! touchscreen 1)
     (let ((m (touch-from-event game canvas e)))
       (set! game (game-input game (car m) (cadr m))))))


  (console.log "building game")
  ;; todo - pass in game specific func
  (set! game (nightjar-intro (make-new-game)))
  (requestAnimFrame top-render ctx))

(define (mutate-game f)
  (lambda (data)
    (set! game (f game data))))

;; ----------------------------------------

(console.log "started nightjar game")

(define canvas (document.getElementById "canvas"))
(define ctx (canvas.getContext "2d"))

;(define screen-width 1024)
;(define screen-height 768)
(define screen-width 1774)
(define screen-height 998)


(define load-time (js "new Date()"))

(set! ctx.fillStyle "#fff")
(set! ctx.strokeStyle "#000")

