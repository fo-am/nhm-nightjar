;; -*- mode: scheme; -*-
; ------------------------------------------------
; nightjar specific stuff

(js ";")

(define bg-col "#221d35") 
(define highlight-col "#f5dc6e")
(define default-button-x 350)
(define default-button-y (+ (/ screen-height 2) 200))
(define button-gap 250)
(define game-time-allowed 15)

(define filenames
  (list
   "Reflectance_CF003_V_rgb_0.46-r.jpg"
   "Reflectance_CF004_V_rgb_0.63-r.jpg"
   "Reflectance_CF005_V_rgb_0.53-r.jpg"
   "Reflectance_CF006_V_rgb_0.57-r.jpg"
   "Reflectance_CF007_V_rgb_0.61-r.jpg"
   "Reflectance_CF008_V_rgb_0.41-r.jpg"
   "Reflectance_CF009_V_rgb_0.69-r.jpg"
   "Reflectance_CF010_V_rgb_0.49-r.jpg"
   "Reflectance_CF011_V_rgb_0.43-r.jpg"
   "Reflectance_CF012_V_rgb_0.41-r.jpg"
   "Reflectance_CF013_V_rgb_0.56-r.jpg"
   "Reflectance_CF014_V_rgb_0.67-r.jpg"
   "Reflectance_CF015_V_Rgb_0.65-r.jpg"
   "Reflectance_CF017_V_rgb_0.54-r.jpg"
   "Reflectance_CF020_V_rgb_0.47-r.jpg"
   "Reflectance_CF021_V_rgb_0.52-r.jpg"
   "Reflectance_CF022_V_rgb_0.52-r.jpg"
   "Reflectance_CF024_V_rgb_0.57-r.jpg"
   "Reflectance_CF025_V_rgb_0.33-r.jpg"
   "Reflectance_CF026_V_rgb_0.55-r.jpg"
   "Reflectance_CF027_V_rgb_0.45-r.jpg"
   "Reflectance_CF028_V_rgb_0.55-r.jpg"
   "Reflectance_CF030_V_rgb_0.47-r.jpg"
   "Reflectance_CF032_V_rgb_0.58-r.jpg"
   "Reflectance_CF035_V_rgb_0.50-r.jpg"
   "Reflectance_CF036_V_rgb_0.48-r.jpg"

   "Reflectance_CP005_V_rgb_0.62-r.jpg"
   "Reflectance_CP007_V_rgb_0.40-r.jpg"
   "Reflectance_CP011_V_rgb_0.58-r.jpg"
   "Reflectance_CP014_V_rgb_0.36-r.jpg"
   "Reflectance_CP017_V_rgb_0.52-r.jpg"
   "Reflectance_CP018_V_Rgb_0.55-r.jpg"
   "Reflectance_CP020_V_rgb_0.44-r.jpg"
   "Reflectance_CP031_V_rgb_0.25-r.jpg"

   "Reflectance_MV002_V_rgb_0.54-r.jpg"
   "Reflectance_MV004_V_rgb_0.40-r.jpg"
   "Reflectance_MV005_V_rgb_0.55-r.jpg"
   "Reflectance_MV006_V_rgb_0.44-r.jpg"
   "Reflectance_MV007_V_rgb_0.49-r.jpg"))

;;(set! filenames
;;      (filenames.concat
;;       (map
;;        (lambda (fn)
;;          (+ "mongoose-" fn))
;;        filenames)))

(define photos
  (map
   (lambda (fn)
     (+ "photos/" fn))
   filenames))

(define (feather)
  (choose (list "feather1.png" "feather2.png" "feather3.png")))

(define left-feather "feather-white-4.png")
(define right-feather "feather-white-3.png")

(define (nightjar-example file pos width height)
  (list file pos width height))

(define (nightjar-example-file n) (list-ref n 0))
(define (nightjar-example-pos n) (list-ref n 1))
(define (nightjar-example-width n) (list-ref n 2))
(define (nightjar-example-height n) (list-ref n 3))

;; get from image structure
(define image-width 2474)
(define image-height 1640)
(define image-centre-x (/ image-width 2))
(define image-centre-y (/ image-height 2))

(define positions
  (list
   (list 932 790 454 134)
   (list 981 818 378 92)
   (list 904 768 465 139)
   (list 904 763 476 144)
   (list 1030 778 546 156)
   (list 917 751 488 157)  ;;  cf08
   (list 1008 766 328 119)
   (list 1153 783 466 119)
   (list 1095 763 406 118)
   (list 910 752 480 154)
   (list 1112 738 536 174) ;;  cf014
   (list 1093 773 423 114)
   (list 1140 766 332 133)
   (list 1077 743 345 110)
   (list 1126 738 354 129)
   (list 1075 761 259 101)
   (list 1108 775 369 98)
   (list 1047 783 351 103)
   (list 1016 721 422 166)
   (list 1000 766 405 132) ;;   cf26
   (list 1133 755 331 125)
   (list 1025 773 350 118)
   (list 1150 777 326 110)
   (list 1100 754 352 111)
   (list 1053 782 294 104)
   (list 1058 798 308 92)
   (list 1130 802 400 131)
   (list 963 751 449 133)
   (list 1059 766 505 156)
   (list 922 750 551 133)
   (list 994 740 408 167)
   (list 1091 779 408 119)
   (list 1151 717 342 126)
   (list 996 768 372 129)
   (list 970 753 387 129);;   mv02
   (list 1122 746 423 157);;  mv04
   (list 989 773 332 118)
   (list 936 764 447 173)
   (list 984 702 408 180)))

(define scores
  (list 778.15 1179.35 1360.7 1508.25 1651.25 1778.2 1890.65 1986.65 
	2079.4 2160.63157894737 2252.15 2343.15 2426 2506.17647058824 
	2579.15 2649.6 2714.94736842105 2777.05 2848.21052631579 
	2904.26315789474 2954.55555555556 3016.1 3073.7 3135.7 
	3199.61111111111 3259.25 3313.84615384615 3377.42105263158 3431.7 
	3490.41176470588 3543.68421052632 3597.57894736842 3659.10526315789 
	3714.4 3765.5 3817.15789473684 3873.42105263158 3935.75 
	3984.88888888889 4043.55 4096.8 4157.9 4210.625 4259.35 4311.9 
	4369.8 4424.55555555556 4483.63157894737 4535.27777777778 4586.4 
	4643.63157894737 4696.35 4754.27777777778 4807.63157894737 
	4859.44444444444 4921.25 4988.94736842105 5043.78947368421 
	5101.76470588235 5156.42105263158 5216.65 5282.2 5346.23529411765 
	5405.76470588235 5468.84210526316 5524.875 5590.05263157895 5654.4 
	5728.5 5800.47368421053 5879.63157894737 5952.9375 6024 
	6100.63157894737 6181.47368421053 6265.61111111111 6363.84210526316 
	6454.05 6543.9 6649.35 6733.78947368421 6839.55 6932 7060.88235294118 
	7186.29411764706 7301.86666666667 7423.70588235294 7563.1052631579 
	7712.42857142857 7863.38888888889 8034.8 8214.9 8433.16666666667 
	8729.94117647059 9061.44444444444 9381.625 9780 10360.2857142857 
	11127.5555555556 12726.7894736842))

;;(define (adder l r)
;;  (cond 
;;   ((null? l) r)
;;   (else (+ (car l) (adder (cdr l) r)))))
;;(display (/ (adder scores 0) (length scores)))(newline)

;; binary search
(define (ordered-list-search l score)
  (define (_ start end)
    (cond
     ;; no children
     ((null? l) start)
     (else
      (let ((mid (floor (+ start (/ (- end start) 2)))))
	(cond
	 ;; not found
	 ((< (- end start) 2) start)
	 ;; found
	 ((eq? score (list-ref l mid)) mid)
	 ;; search down
	 ((> (list-ref l mid) score)
	  (_ start mid))
	 ;; search up
	 (else
	  (_ mid end)))))))
  (_ 0 (length l)))

(define (build-examples n)
  (cond
   ((zero? n) ())
   (else
    (let ((pos (list-ref positions (modulo n (length positions)))))
      (cons
       (nightjar-example
        (list-ref photos n)
        (list (list-ref pos 0) (list-ref pos 1))
        (list-ref pos 2)
        (list-ref pos 3))
       (build-examples (- n 1)))))))

(define nightjar-examples (build-examples (- (length photos) 1)))

(define safe-x 0.3)
(define safe-y 0.4)

(define (generate-image-pos)
  (list (- (* screen-width (+ safe-x (* (rndf) (- 1 (* safe-x 2))))) image-centre-x)
        (- (* screen-height (+ safe-y (* (rndf) (- 1 (* safe-y 2))))) image-centre-y)))

(define (empty-nightjar-data)
  (list 0 0 0 "monkey" #f 0 () () 0 (sprite 0 0 "wrong.png" 0) 0 0))

(define (nightjar-start-time g) (list-ref g 0))
(define (nightjar-modify-start-time v g) (list-replace g 0 v))
(define (nightjar-photo-time g) (list-ref g 1))
(define (nightjar-modify-photo-time v g) (list-replace g 1 v))
(define (nightjar-player-id g) (list-ref g 2))
(define (nightjar-modify-player-id v g) (list-replace g 2 v))
(define (nightjar-player-type g) (list-ref g 3))
(define (nightjar-modify-player-type v g) (list-replace g 3 v))
(define (nightjar-played-before g) (list-ref g 4))
(define (nightjar-modify-played-before v g) (list-replace g 4 v))
(define (nightjar-player-age g) (list-ref g 5))
(define (nightjar-modify-player-age v g) (list-replace g 5 v))
(define (nightjar-images g) (list-ref g 6))
(define (nightjar-modify-images v g) (list-replace g 6 v))
(define (nightjar-image-pos g) (list-ref g 7))
(define (nightjar-modify-image-pos v g) (list-replace g 7 v))
(define (nightjar-score g) (list-ref g 8))
(define (nightjar-modify-score v g) (list-replace g 8 v))
(define (nightjar-sprite g) (list-ref g 9))
(define (nightjar-modify-sprite v g) (list-replace g 9 v))
(define (nightjar-found g) (list-ref g 10))
(define (nightjar-modify-found v g) (list-replace g 10 v))
(define (nightjar-total-score g) (list-ref g 11))
(define (nightjar-modify-total-score v g) (list-replace g 11 v))

(define (nightjar-heading ctx txt)
  (set! ctx.fillStyle highlight-col)
  (set! ctx.font "80pt effra")
  (wrap-text ctx txt 100 200 1500 100))

(define (nightjar-top-text ctx txt)
  (set! ctx.fillStyle "#fff")
  (set! ctx.font "50pt effra")
  (wrap-text ctx txt 100 200 1300 80))

(define (nightjar-text ctx txt)
  (set! ctx.fillStyle "#fff")
  (set! ctx.font "50pt effra")
  (wrap-text ctx txt 100 400 1300 80))

(define (nightjar-small-top-text ctx txt)
  (set! ctx.fillStyle highlight-col)
  (set! ctx.font "40pt effra")
  (wrap-text ctx txt 100 200 1400 60))

(define (nightjar-small-text ctx txt)
  (set! ctx.fillStyle highlight-col)
  (set! ctx.font "40pt effra")
  (wrap-text ctx txt 100 400 1400 60))

(define (nightjar-all-text ctx txt)
  (set! ctx.fillStyle "#fff")
  (set! ctx.font "50pt effra")
  (wrap-text ctx txt 100 200 1400 75))

(define (nightjar-all-text-shadow ctx txt)
  (set! ctx.fillStyle "#fff")
  (set! ctx.font "50pt effra")
  (wrap-text ctx txt 100 200 1400 75))

(define (nightjar-bottom-text ctx txt)
  (set! ctx.fillStyle "#fff")
  (set! ctx.font "35pt effra")
  (let ((m (ctx.measureText txt)))
    (ctx.fillText txt (- (/ screen-width 2) (/ m.width 2))
		  (- screen-height 45))))

(define (time-left c)
  (* (- (game-time c)
        (nightjar-start-time (game-data c)))
     0.001))

(define (stroke-clock ctx c x y)
  (ctx.beginPath)
  (ctx.moveTo x y)
  (ctx.arc
   x y 100 (* Math.PI -0.5)
   (+ (* Math.PI -0.5)
      (/ (* (time-left c) Math.PI 2) game-time-allowed))
   #t)
  (ctx.fill))

(define introbg-canvas   
  (let ((tcanvas (document.createElement "canvas")))
    (set! tcanvas.width screen-width)
    (set! tcanvas.height screen-height)
    tcanvas))

(define introbg-ctx (introbg-canvas.getContext "2d")) 

(define (draw-random-feather)
  (introbg-ctx.drawImage 
   (find-image (+ "col-feather-" (+ (random 10) 1) ".png") image-lib)
   (- (random (+ screen-width 100)) 50)
   (- (random screen-height) 200)))

(define (splat-feathers c)
  (when (not (zero? c))
	(draw-random-feather)
	(splat-feathers (- c 1))))
 
(define (darken-feathers)
  (set! introbg-ctx.globalAlpha 0.4)
  (set! introbg-ctx.fillStyle "#000")
  (introbg-ctx.fillRect 0 0 screen-width screen-height)
  (set! introbg-ctx.globalAlpha 1))

(define (draw-feather-array ctx x y a)
  (when (not (null? a))
	(let ((img (find-image (+ "col-feather-" (car a) ".png") image-lib))) 
	  (ctx.drawImage 
	   img
	   x (- y img.height))
	  (draw-feather-array ctx (+ x 80) y (cdr a)))))

(define (msg t) 
  (display t))

(define (splurge n)
  (let ((t (+ "" (+ (Math.floor n) 100))))
    (t.substring 1 t.length)))

(define (nightjar-draw-clock ctx c)
  (let ((pos-x (- screen-width 170))
	(pos-y (- screen-height 240)))
    (set! ctx.fillStyle bg-col)
    (ctx.beginPath)
    (ctx.moveTo pos-x pos-y)
    (ctx.arc pos-x pos-y 100 0 (* Math.PI 2) #t)
    (ctx.fill)
    (set! ctx.fillStyle highlight-col)
    (stroke-clock ctx c pos-x pos-y)
    (ctx.fill)
    (set! ctx.font "45pt effra")
    (ctx.fillText
     (+ "00:" (splurge (- game-time-allowed (time-left c))))
     (- pos-x 70)
     (+ pos-y 200))))

(define (nightjar-new-game c)
  (nightjar-game
   (game-modify-data
    (lambda (d)
      (nightjar-modify-start-time
       (game-time c) d))
    (game-modify-data
     (lambda (d)
       (nightjar-modify-image-pos
        (generate-image-pos)
        (nightjar-modify-sprite
         (sprite -999 -999 "right.png" 0)
         d)))
     c))))

(define (nightjar-new-game-reset-timer n c)
  (load-image-mutate
   (lambda (c)
     (nightjar-new-game
      (game-modify-data
       (lambda (d)
         (nightjar-modify-images
          (cdr (nightjar-images d))
          (nightjar-modify-photo-time
           (game-time c) d)))
       c)))
   (nightjar-example-file (list-ref (nightjar-images (game-data c)) n)))
  (game-modify-buttons () c))

(define (nightjar-new-game-images c)
  (define start 0)
  (play-sound "sound/button.wav")  
  (let ((images (crop (shuffle (slice nightjar-examples start 39)) 5)))
    (load-image-mutate
     (lambda (c)
       (nightjar-new-game
        (game-modify-data
         (lambda (d)
           (nightjar-modify-photo-time
            (game-time c)
            (nightjar-modify-images 
	     images 
	     (nightjar-modify-found 0 d))))
	 c)))     
     (nightjar-example-file (list-ref images 0)))
    (game-modify-buttons () c)))

(define screensave-offset (- (* (rndf) 150) 40))

(define (nightjar-intro c)
  (let ((icon-x 150))
    (game-modify-update
     (lambda (t c) c)
     (game-modify-data
      (lambda (d)
	(empty-nightjar-data))
      (game-modify-render
       (lambda (ctx)
	 (set! ctx.fillStyle highlight-col)
	 (set! ctx.font "70pt effra heavy")
	 (wrap-text ctx "Where is that nightjar?" 350 (+ 350 screensave-offset) 1500 100)
	 (set! ctx.fillStyle "#fff")
	 (set! ctx.font "40pt effra")
	 (wrap-multitext-slow ctx (list "Nightjars are nocturnal birds that use camouflage to stay hidden during the day. How fast are you at spotting them?") 0 (+ 450 screensave-offset) 950 60)
	 )
       
       (game-modify-buttons
	(list
	 (image-button
	  "Play"
	  default-button-x
	  (+ default-button-y screensave-offset -20)
	  #f
	  ""
	  (lambda (c)
	    (play-sound "sound/button.wav")
	    (nightjar-explain-screen c)))

	 (image-button
	  "Project nightjar"
	  (+ default-button-x 170)
	  (+ default-button-y screensave-offset -20)
	  #f
	  "feather-white-3.png"
	  (lambda (c)
	    (play-sound "sound/button.wav")
	    (nightjar-about c)))
	 
	 
	 )
	c))))))

(define (nightjar-about c)
  (let ((icon-x 150))
  (game-modify-data
   (lambda (d)
     (empty-nightjar-data))
   (game-modify-render
    (lambda (ctx)

      (let ((osx 625) (osy 300))
	(ctx.drawImage (find-image "foam-logo.png" image-lib) (+ 670 osx) (+ 560 osy))
	(ctx.drawImage (find-image "exeter.png" image-lib) (+ 890 osx) (+ 600 osy)))

;;      (ctx.drawImage (find-image "feather-divider.png" image-lib) 400 200)

      ;;(set! ctx.fillStyle highlight-col)
      (set! ctx.font "35pt effra")
      (wrap-multitext-slow
       ctx 
       (list 
	"Project Nightjar studied how nightjars have evolved to be camouflaged in their surroundings."
	""
	"This game gathered data on how fast participants spotted nightjars."
	""
	"The research showed that predators which see in three colours (like humans and some other primates) are better at spotting nightjars than predators that see in two colours (like mongooses). Predators and prey are in an evolutionary battle to spot each other and not be seen."
	""
	"Visit nightjar.exeter.ac.uk to find out more."
	)
       -50 130 1000 50)

      (set! ctx.fillStyle highlight-col)
      (set! ctx.font "bold 35pt effra")
      (ctx.fillText "nightjar.exeter.ac.uk" 397 830) 
      )
    
    
    
    (game-modify-buttons
     (list
      (image-button
       "Home"
       15
       (+ default-button-y 200)
       #f
       "feather-white-1.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (nightjar-intro c)))

      ;; (image-button
      ;;  "Play"
      ;;  (- default-button-x 300)
      ;;  (+ default-button-y 60)
      ;;  #f
      ;;  "feather-white-5.png"
      ;;  (lambda (c)
      ;;    (play-sound "sound/button.wav")
      ;;    (nightjar-explain-screen c)))

      
      
      )
     c)))))


(define (get-n-items lst num)
  (cond
   ((null? lst) ())
   ((zero? num) ())
   (else (cons (car lst) (get-n-items (cdr lst) (- num 1))))))

(define (slice lst start count)
  (if (> start 1)
      (slice (cdr lst) (- start 1) count)
      (get-n-items lst count)))

(define (nightjar-explain-screen c)
  (game-modify-render
   (lambda (ctx)
     (set! ctx.fillStyle "#fff")
     (set! ctx.font "40pt effra")
;;     (ctx.drawImage (find-image "leftcluster.png" image-lib) 10 100)
;;     (ctx.drawImage (find-image "rightcluster.png" image-lib) 1300 100)
     
     (wrap-multitext-slow ctx (list "There is one nightjar hidden in every photo." "You have up to 15 seconds to find each one." "Touch it as soon as you see it.") 0 100 1300 60)
     
     (ctx.drawImage (find-image "nightjar.jpg" image-lib) 450 250)
     )

   (game-modify-buttons
    (list

     (rect-button
      ""
      450 250
      800 600
      #f
      (lambda (c)
        (nightjar-new-game-images c)))
     
    
     (image-button
      "Start"
      775
      (+ default-button-y 180)
      #f
      "feather-white-3-s.png"
      (lambda (c)
        (nightjar-new-game-images c))))
    c)))

(define (nightjar-game c)
  ;; todo: choose and delete
  (define example (car (nightjar-images (game-data c))))

  (game-modify-render
   (lambda (ctx)
     (ctx.drawImage
      (find-image (nightjar-example-file example) image-lib)
      (car (nightjar-image-pos (game-data c)))
      (cadr (nightjar-image-pos (game-data c))))
     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (set! ctx.fillStyle bg-col)
     (ctx.fillRect 0 (- screen-height 120) screen-width 120)

     (nightjar-draw-clock ctx c)


     )

   (game-modify-update
    (lambda (t c)
      (if (> (- (game-time c)
                (nightjar-start-time (game-data c)))
             (* game-time-allowed 1000))
          (nightjar-fail "You'll go hungry tonight!" c)
          c))

    (game-modify-buttons
     (list

;      (image-button
;       "I give up"
;       (- screen-width 150)
;       (- screen-height 150)
;       #f
;       "quit.png"
;       (lambda (c)
;         (nightjar-fail "You'll go hungry tonight!" c)))

      ;; button over nightjar
      (rect-button
       ""
       (+ (car (nightjar-example-pos example))
          (car (nightjar-image-pos (game-data c))))

       (+ (cadr (nightjar-example-pos example))
          (cadr (nightjar-image-pos (game-data c))))

       (nightjar-example-width example)
       (nightjar-example-height example)
       #f
       (lambda (c)
         (play-sound "sound/found.wav")
         (nightjar-win
          (game-modify-data
           (lambda (d)
	     (let ((score (- (game-time c) (nightjar-start-time d))))
             (nightjar-modify-sprite
              (sprite (- (game-mx c) 126)
                      (- (game-my c) 105)
                      "right.png" (+ (game-time c) 2000))
	      (nightjar-modify-total-score
	       (+ (nightjar-total-score d) score)	       
	       (nightjar-modify-found
		(+ (nightjar-found d) 1)	       
		(nightjar-modify-score score d))))))
           c))))

      (image-button
       "Home"
       15
       (+ default-button-y 200)
       #f
       "feather-white-4-s.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (nightjar-intro c)))

      ;; big lose button over whole screen
      (rect-button
       ""
       0 0 screen-width screen-height #f
       (lambda (c)
         (play-sound "sound/notfound.wav")
         (game-modify-data
          (lambda (d)
            (nightjar-modify-sprite
             (sprite (- (game-mx c) 126)
                     (- (game-my c) 105)
                     "wrong.png" (+ (game-time c) 2000)) 
	     d))
	  c)))


      
      ) c))))

(define (nightjar-fail reason c)
  (game-modify-render
   (lambda (ctx)
     (define example (car (nightjar-images (game-data c))))
     (ctx.drawImage
      (find-image (nightjar-example-file example) image-lib)
      (car (nightjar-image-pos (game-data c)))
      (cadr (nightjar-image-pos (game-data c))))

     ;; highlight the nightjar
     
     (let ((x (+ (car (nightjar-example-pos example))
		 (car (nightjar-image-pos (game-data c)))))
	   (y (+ (cadr (nightjar-example-pos example))
		 (cadr (nightjar-image-pos (game-data c))))))
       ;; (ctx.beginPath)
       ;; (set! ctx.strokeStyle bg-col)
       ;; (set! ctx.lineWidth 32)
       ;; (ctx.arc (+ x (/ (nightjar-example-width example) 2)) 
       ;; 		(+ y (/ (nightjar-example-height example) 2)) 
       ;; 		(/ (nightjar-example-width example) 2)
       ;; 		0 (* Math.PI 2) true)
       ;; (ctx.stroke)
       (ctx.beginPath)
       (set! ctx.lineWidth 16)
       (set! ctx.strokeStyle highlight-col)
       (ctx.arc (+ x (/ (nightjar-example-width example) 2)) 
       		(+ y (/ (nightjar-example-height example) 2)) 
       		(/ (nightjar-example-width example) 2)
       		0 (* Math.PI 2) true)
       (ctx.stroke)
       )
     (set! ctx.lineWidth 1)

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (set! ctx.fillStyle bg-col)
     (ctx.fillRect 0 (- screen-height 120) screen-width 120)
     (nightjar-bottom-text ctx reason)

     )

   (game-modify-update
    (lambda (t c) c)

    (game-modify-buttons
     (list

      (image-button
       "Next"
       (- screen-width 145)
       (+ default-button-y 200) #f
       "feather-white-4-s.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "")
             (nightjar-new-game-reset-timer 1 c))))

      (image-button
       "Home"
       15
       (+ default-button-y 200)
       #f
       "feather-white-4-s.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (nightjar-intro c)))

      ) c))))

(define (print-trunc a)
  (/ (Math.floor (* a 100)) 100))

(define (nightjar-win c)
  (game-modify-render
   (lambda (ctx)
     (define example (car (nightjar-images (game-data c))))
 
     (ctx.drawImage
      (find-image (nightjar-example-file example) image-lib)
      (car (nightjar-image-pos (game-data c)))
      (cadr (nightjar-image-pos (game-data c))))

     (sprite-render
      ctx
      (game-time c)
      (nightjar-sprite (game-data c)))

     (set! ctx.fillStyle bg-col)
     (ctx.fillRect 0 (- screen-height 120) screen-width 120)
     (let ((done (+ (- 5 (length (nightjar-images (game-data c)))) 1)))
       (nightjar-bottom-text ctx (+ "Nightjar " done "/5 found in "
				    (print-trunc (/ (nightjar-score (game-data c)) 1000))
				    " seconds."))))

   (game-modify-update
    (lambda (t c) c)
    
    (game-modify-buttons
     (list
      (image-button
       "Next"
       (- screen-width 145)
       (+ default-button-y 200) #f
       "feather-white-3-s.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         ;; check end of game
         (if (eq? (length (nightjar-images (game-data c))) 1)
             (nightjar-get-score c "Well done!")
             (nightjar-new-game-reset-timer 1 c))))
      
      (image-button
       "Home"
       15
       (+ default-button-y 200)
       #f
       "feather-white-4-s.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (nightjar-intro c)))


      ) c))))

(define (non-spots-time c)
  (* 1000 game-time-allowed (- 5 (nightjar-found (game-data c)))))

(define (nightjar-get-score c reason)
  (msg (non-spots-time c))
  (nightjar-finish 
   game
   (/ (+ (nightjar-total-score (game-data c))
	 (non-spots-time c)) 5)
   (ordered-list-search scores (nightjar-score (game-data c)))
   (nightjar-found (game-data c))
   reason))

(define (score-to-text score)
  (cond
   ((< score 5) "Wow - good work!")
   ((< score 25) "Good score!")
   ((< score 50) "Not too bad...")
   (else "You might need more practice.")))

(define (get-percent score)
  (cond
   ((< score 5) "5")
   ((and (>= score 5) (< score 30)) "25") 
   (else "50")))

(define (low-score count score)
  (if (and (> count 0) (> score 50))
      "The average is 4.9 seconds."
      "Would you like to play again?"))

(define (get-score-text score count)
  (if (and (> count 0) (< score 50))
      (+ "That puts you in the top " (get-percent score) "% of players.")
      (low-score count score)))

(define (trunc a)
  (/ (Math.floor (* a 100)) 100))

(define (nightjar-finish c av score count reason)
  (game-modify-render
   (lambda (ctx)     
     (let ((top-text reason))
       (if (zero? count)
	 (set! top-text (+ top-text " You didn't find any nightjars..."))
	 (set! top-text (+ top-text " You found " count "/5 nightjars in an average of " (trunc (/ av 1000)) " seconds.")))
       (let ((extra ""))
	 (when (not (zero? count)) (set! extra (score-to-text score)))
	 
	 ;;(set! ctx.fillStyle highlight-col)
	 (set! ctx.font "40pt effra")
	 (wrap-multitext-slow
	  ctx 
	  (list top-text "" (get-score-text score count) extra)
	  0 300 950 60))))
   
   (game-modify-update
    (lambda (t c) c)
    
    (game-modify-buttons
     (list

      ;; (image-button
      ;;  "Play again"
      ;;  (- default-button-x 350)
      ;;  (- default-button-y 100)
      ;;  #f
      ;;  "feather-white-5b.png"
      ;;  (lambda (c)
      ;;    (play-sound "sound/button.wav")
      ;;    (nightjar-explain-screen c)))
      
      
      ;; (image-button
      ;;  "Home"
      ;;  default-button-x
      ;;  (+ default-button-y 100)
      ;;  #f
      ;;  "feather-white-1.png"
      ;;  (lambda (c)
      ;;    (play-sound "sound/button.wav")
      ;;    (nightjar-intro c)))

      (image-button
       "Project nightjar"
       default-button-x
       default-button-y
       #f
       "feather-white-3.png"
       (lambda (c)
         (play-sound "sound/button.wav")
         (nightjar-about c)))


      ) c))))

(set! ctx.font "normal 75pt effra")
(centre-text ctx "Loading..." 240)

(load-images!
 (append (list "feather1.png"
       "feather2.png"
       "feather3.png"
       "feather4.png"
       "leftcluster.png"
       "rightcluster.png"
       "col-feather-1.png"
       "col-feather-2.png"
       "col-feather-3.png"
       "col-feather-4.png"
       "col-feather-5.png"
       "col-feather-6.png"
       "col-feather-7.png"
       "col-feather-8.png"
       "col-feather-9.png"
       "col-feather-10.png"
       "feather-white-1.png"
       "feather-white-2.png"
       "feather-white-3.png"
       "feather-white-4.png"
       "feather-white-5.png"
       "feather-white-5b.png"
       "feather-white-3-s.png"
       "feather-white-4-s.png"
       "right.png"
       "wrong.png"
       "foam-logo.png"
       "feather-divider.png"
       "exeter.png"
       "nightjar.jpg") photos)
 (lambda ()
   (splat-feathers 1000)
   (darken-feathers)
   (start-game canvas ctx)))

